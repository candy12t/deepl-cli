// Code generated by MockGen. DO NOT EDIT.
// Source: translate.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/candy12t/deepl-cli/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTranslater is a mock of Translater interface.
type MockTranslater struct {
	ctrl     *gomock.Controller
	recorder *MockTranslaterMockRecorder
}

// MockTranslaterMockRecorder is the mock recorder for MockTranslater.
type MockTranslaterMockRecorder struct {
	mock *MockTranslater
}

// NewMockTranslater creates a new mock instance.
func NewMockTranslater(ctrl *gomock.Controller) *MockTranslater {
	mock := &MockTranslater{ctrl: ctrl}
	mock.recorder = &MockTranslaterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslater) EXPECT() *MockTranslaterMockRecorder {
	return m.recorder
}

// TranslateText mocks base method.
func (m *MockTranslater) TranslateText(text, sourceLang, targetLang string) (*model.TranslateText, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateText", text, sourceLang, targetLang)
	ret0, _ := ret[0].(*model.TranslateText)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateText indicates an expected call of TranslateText.
func (mr *MockTranslaterMockRecorder) TranslateText(text, sourceLang, targetLang interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateText", reflect.TypeOf((*MockTranslater)(nil).TranslateText), text, sourceLang, targetLang)
}
