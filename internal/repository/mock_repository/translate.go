// Code generated by MockGen. DO NOT EDIT.
// Source: translate.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/candy12t/deepl-cli/internal/model"
	gomock "github.com/golang/mock/gomock"
)

// MockTranslator is a mock of Translator interface.
type MockTranslator struct {
	ctrl     *gomock.Controller
	recorder *MockTranslatorMockRecorder
}

// MockTranslatorMockRecorder is the mock recorder for MockTranslator.
type MockTranslatorMockRecorder struct {
	mock *MockTranslator
}

// NewMockTranslator creates a new mock instance.
func NewMockTranslator(ctrl *gomock.Controller) *MockTranslator {
	mock := &MockTranslator{ctrl: ctrl}
	mock.recorder = &MockTranslatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTranslator) EXPECT() *MockTranslatorMockRecorder {
	return m.recorder
}

// TranslateText mocks base method.
func (m *MockTranslator) TranslateText(text, sourceLang, targetLang string) (*model.TranslateText, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TranslateText", text, sourceLang, targetLang)
	ret0, _ := ret[0].(*model.TranslateText)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TranslateText indicates an expected call of TranslateText.
func (mr *MockTranslatorMockRecorder) TranslateText(text, sourceLang, targetLang interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TranslateText", reflect.TypeOf((*MockTranslator)(nil).TranslateText), text, sourceLang, targetLang)
}
